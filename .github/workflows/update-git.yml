name: "Update AAGL git source"
on:
  schedule:
    - cron: '0 */3 * * *'
  workflow_dispatch:

jobs:
  update:
    name: Update
    runs-on: ubuntu-latest
    outputs:
      skip-build: ${{ steps.diff.outputs.skipped }}
    steps:
    - name: Install Doppler CLI
      uses: dopplerhq/cli-action@v2

    - name: Pass all secrets to next steps
      run: |
        while read -rd $'' line; do echo "$line" >> $GITHUB_ENV; done < <( doppler secrets download --no-file --format=json | jq "." | grep -v 'DOPPLER_\(CONFIG\|ENVIRONMENT\|PROJECT\)' | jq -r 'to_entries|map("\(.key)<<EOF\n\(.value)\nEOF\u0000")[]' )
        while read -r line; do echo "::add-mask::$line"; done < <( doppler secrets download --no-file --format=json | jq "." | grep -v 'DOPPLER_\(CONFIG\|ENVIRONMENT\|PROJECT\)' | jq -r 'to_entries|map("\(.value)\u0000")[]' )
      env:
        DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}

    - name: Install Nix
      uses: cachix/install-nix-action@v20
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable

    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Update sources
      run: |
        cd pkgs/an-anime-game-launcher-gtk
        ./update-sources.sh

    - name: Create diff
      id: diff
      run: |
        mkdir -p ~/artifact
        git diff --oneline --graph | tee ~/artifact/update.diff
        if [[ "$(<~/artifact/update.diff)" == "" ]]; then
          echo "skipped=yes" >> $GITHUB_OUTPUT
        else
          echo "skipped=no" >> $GITHUB_OUTPUT
        fi

    - name: Upload diff artifact
      if: ${{ steps.diff.outputs.skipped == 'no' }}
      uses: actions/upload-artifact@v3
      with:
        name: update.diff
        path: ~/artifact/update.diff

  build:
    name: Build
    needs: update
    runs-on: ubuntu-latest
    if: ${{ needs.update.outputs.skip-build == 'no' }}
    strategy:
      fail-fast: false
      matrix:
        cachixName:
          - ezkea
        nixPath:
          - nixpkgs=channel:nixos-unstable
          - nixpkgs=channel:nixpkgs-unstable
          - nixpkgs=channel:nixos-22.11
    steps:
    - name: Install Doppler CLI
      uses: dopplerhq/cli-action@v2

    - name: Pass all secrets to next steps
      run: |
        while read -rd $'' line; do echo "$line" >> $GITHUB_ENV; done < <( doppler secrets download --no-file --format=json | jq "." | grep -v 'DOPPLER_\(CONFIG\|ENVIRONMENT\|PROJECT\)' | jq -r 'to_entries|map("\(.key)<<EOF\n\(.value)\nEOF\u0000")[]' )
        while read -r line; do echo "::add-mask::$line"; done < <( doppler secrets download --no-file --format=json | jq "." | grep -v 'DOPPLER_\(CONFIG\|ENVIRONMENT\|PROJECT\)' | jq -r 'to_entries|map("\(.value)\u0000")[]' )
      env:
        DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}

    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install Nix
      uses: cachix/install-nix-action@v20
      with:
        nix_path: "${{ matrix.nixPath }}"

    - name: Install Cachix
      uses: cachix/cachix-action@v12
      with:
        name: ${{ matrix.cachixName }}
        authToken: '${{ env.CACHIX_AUTH_TOKEN }}'
        pushFilter: '(-source$|-src$|\.tar\.gz$|\.patch$)'

    - name: Download diff artifact
      uses: actions/download-artifact@v3
      with:
        name: update.diff
        path: ~/artifact/update.diff

    - name: Apply diff
      run: |
        git apply ~/artifact/update.diff/update.diff

    - name: Build
      run: |
        nix-build
      env:
        NIXPKGS_ALLOW_UNFREE: 1

  push:
    name: Push
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Install Doppler CLI
      uses: dopplerhq/cli-action@v2

    - name: Pass all secrets to next steps
      run: |
        while read -rd $'' line; do echo "$line" >> $GITHUB_ENV; done < <( doppler secrets download --no-file --format=json | jq "." | grep -v 'DOPPLER_\(CONFIG\|ENVIRONMENT\|PROJECT\)' | jq -r 'to_entries|map("\(.key)<<EOF\n\(.value)\nEOF\u0000")[]' )
        while read -r line; do echo "::add-mask::$line"; done < <( doppler secrets download --no-file --format=json | jq "." | grep -v 'DOPPLER_\(CONFIG\|ENVIRONMENT\|PROJECT\)' | jq -r 'to_entries|map("\(.value)\u0000")[]' )
      env:
        DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}

    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Download diff artifact
      uses: actions/download-artifact@v3
      with:
        name: update.diff
        path: ~/artifact/update.diff

    - name: Apply diff
      run: |
        git apply ~/artifact/update.diff/update.diff

    - name: Push commit
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: "an-anime-game-launcher-gtk-git: automated update"
        commit_author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>

  telegram:
    name: Telegram
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Install Doppler CLI
      uses: dopplerhq/cli-action@v2

    - name: Pass all secrets to next steps
      run: |
        while read -rd $'' line; do echo "$line" >> $GITHUB_ENV; done < <( doppler secrets download --no-file --format=json | jq "." | grep -v 'DOPPLER_\(CONFIG\|ENVIRONMENT\|PROJECT\)' | jq -r 'to_entries|map("\(.key)<<EOF\n\(.value)\nEOF\u0000")[]' )
        while read -r line; do echo "::add-mask::$line"; done < <( doppler secrets download --no-file --format=json | jq "." | grep -v 'DOPPLER_\(CONFIG\|ENVIRONMENT\|PROJECT\)' | jq -r 'to_entries|map("\(.value)\u0000")[]' )
      env:
        DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}

    - name: Get workflow conclusion
      uses: technote-space/workflow-conclusion-action@v3.0

    - name: Send notification
      uses: yanzay/notify-telegram@v0.1.0
      with:
        chat: ${{ env.NOTIFICATION_CHAT_ID }}
        token: ${{ env.NOTIFICATION_TOKEN }}
        status: ${{ env.WORKFLOW_CONCLUSION }}
      if: env.WORKFLOW_CONCLUSION != 'success'
